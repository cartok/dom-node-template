!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1);var a=((r=o)&&r.__esModule?r:{default:r}).default;t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=i(n(2)),a=i(n(3));function i(e){return e&&e.__esModule?e:{default:e}}var s=o.default.filter(function(e){return void 0!==a.default.find(function(t){return t===e})});["svg","image","style","script"].forEach(function(e){var t=s.findIndex(function(t){return e===t});s.splice(t,1)});var l={},c="http://www.w3.org/2000/svg",d="http://www.w3.org/1999/xhtml",u=new window.DOMParser,f=(void 0!==window&&void 0!==window.document&&window.document.createRange,new WeakMap,new WeakMap,function(){function e(t,n){var r=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"!=typeof t)throw new Error("you need to provide a xml string as first parameter.");(n=Object.assign({},l,n)).svg;this.text=function(e,t){var n=t=Object.assign({},t),r=n.removeComments;n.replaceAttributeValueQuotes;r&&(e=(e=(e=e.replace(/\s*\/\/.*?$/gm,"")).replace(/\/\*{1,}[^]*?\*\//,"")).replace(/\<\!\-\-[^]*?\-\-\>/g,""));e=(e=(e=(e=(e=(e=(e=(e=(e=(e=(e=e.replace(/[\n\t\r]/g,"")).replace(/\s{2,}/g," ")).replace(/;([^\s])/g,"; $1")).replace(/\s(">)/g,"$1")).replace(/>\s*</g,"><")).replace(/^(\s*)|(\s*)$/g,"")).replace(/>\s*/g,">")).replace(/\s*</g,"<")).replace(/(<\w+)(\s{2,})/g,"$1 ")).replace(/([\w-_]+="[\w\s-_]+")(\s*(?!>))/g,"$1 ")).replace(/([\w-_]+="[\w\s-_]+")(\s{2,})>/g,"$1>");return e}(t,{removeComments:!0}),this.tagGroups=g(this.text),this.fragment=window.document.createDocumentFragment(),this.tagGroups.forEach(function(e){var t=function e(t,n){var r=0;var i=0;var l=0;n=Object.assign({},n);var f=n,E=f.type,N=f.addXMLNS;if(void 0===E){var M=b(t);if(N=!0,E=void 0,"div"===M)E="html";else if("svg"===M||"g"===M||"foreignObject"===M)E="svg";else if(s.includes(M)){var C=function(e){console.warn("You provided an <"+e+"></"+e+"> tag as a tag-group (or root node, referring to the string input context)."),console.warn("The <"+e+"></"+e+"> tag exists in HTML and SVG namespace."),console.warn("In this situation, as default, it will be handled like "+E.toUpperCase()+"."),"html"===E?(console.warn('It will have xmlns="http://www.w3.org/1999/xhtml" set, and parsed as "text/html" by the \'DOMParser\'.'),console.warn('You can force SVG creation by passing a true set boolean at "options.mutual.a.isSVG", to the optional parameters object in the constructor call.'),console.warn("\nEXAMLPLE:"),console.warn("const svgContent = new NodeTemplate(`<"+e+"></"+e+">`, { mutual: { "+e+": { isSVG: true } } })")):"svg"===E&&(console.warn('It will have xmlns="http://www.w3.org/2000/svg" set, and parsed as "image/svg+xml" by the \'DOMParser\'.'),console.warn('You can force HTML creation by passing a true set boolean at "options.mutual.a.isHTML", to the optional parameters object in the constructor call.'),console.warn("\nEXAMLPLE:"),console.warn("const htmlContent = new NodeTemplate(`<"+e+"></"+e+">`, { mutual: { "+e+": { isHTML: true } } })"))};switch(M){case"script":case"style":N=!1,E="html";break;case"audio":case"canvas":case"iframe":case"video":E="html";break;case"font":case"title":n.mutual.a.isHTML?E="html":(E="svg",C("title"===M?"title":"font"));break;case"a":n.mutual.a.isSVG?E="svg":(E="html",C("a"))}}else if(o.default.includes(M))E="html";else{if(!a.default.includes(M))throw new Error("Could not detect type for tagName: "+M+".");E="svg"}}void 0===N&&(N=!0);if(N){if(void 0===E)throw new Error("Something went wrong in type detection. Variable 'type' should not be undefined.");var k="html"===E?d:c;t=(t=t.replace(/^(<[a-zA-Z]+(?:\s[^>]*)?)(\sxmlns=["'][^"']*["'])/,"$1")).replace(/^(<([a-zA-Z]+))\b((?:[^>]*>.*?)(<\/\2>)+)/,'$1 xmlns="'+k+'"$3')}if("html"===E){for(var S=[];/<svg/.test(t);){var O=void 0;if(t=t.replace(/(<svg\b(?:[^>]*>.*?)(?:<\/svg>)+)/,function(e){return O=e,'<a id="'+m+"-"+r+'"></a>'}),null===O)throw new Error("you wanted to parse one or multiple svg-type tag-groups but something is wrong with your string. missing closing tag?");r++;var j=e(O,{type:"svg"});if(null===j||void 0===j)throw new Error("Could not parse SVG.");S.push(j)}var G=u.parseFromString(t,"text/html");return S.forEach(function(e,t){var n=G.getElementById(m+"-"+t);n.parentNode.insertBefore(e,n),n.parentNode.removeChild(n)}),G.body.firstElementChild}if("svg"===E){for(var I=[];x(t)&&!/audio|canvas|iframe|video/.test(b(t));){var T="";if(t=t.replace(/<(?=(audio|canvas|iframe|video))\1\b(?:[^>]*>.*?)(?:<\/\1>)+/,function(e){return T=e,'<a id="'+h+"-"+i+'"></a>'}),i++,null===T)throw new Error("you wanted to parse one or multiple svg-type tag-groups but something is wrong with your string. missing closing tag?");var _=e(T,{type:"html"});if(null===_||void 0===_)throw new Error("Could not parse Embedded Content.");I.push(_)}for(var A=[],L=[];y(t)&&"foreignObject"!==b(t);){var P=p(t,"foreignObject",!0),q=(t=t.substring(0,P.startIndex)+t.substring(P.endIndex)).slice(0,P.startIndex),B=t.slice(P.startIndex);t=q.concat('<a id="'+v+"-"+l+'"></a>').concat(B);var D=P.tagGroup.slice(0,P.contentStartIndex),$=P.tagGroup.slice(P.contentEndIndex);if(P.tagGroup=D.concat('<a id="'+w+"-"+l+'"></a>').concat($),A.push(e(P.tagGroup,{type:"svg"})),0!==P.content.length){var R=g(P.content);L.push(R.map(function(t){return e(t,{type:"html"})})),l++}}var F=u.parseFromString(t,"image/svg+xml");return A.forEach(function(e,t){var n=F.getElementById(v+"-"+t);n.parentNode.insertBefore(e,n),n.parentNode.removeChild(n)}),L.forEach(function(e,t){var n=F.getElementById(w+"-"+t),r=window.document.createDocumentFragment();e.forEach(function(e){return r.appendChild(e)}),n.parentNode.insertBefore(r,n),n.parentNode.removeChild(n)}),I.forEach(function(e,t){var n=F.getElementById(h+"-"+t);n.parentNode.insertBefore(e,n),n.parentNode.removeChild(n)}),F.documentElement}}(e);r.fragment.appendChild(t)});r.refs={},r.ids={},Array.from(r.fragment.childNodes).forEach(function(e){return E(e,function(e){var t=void 0;void 0===e.dataset?null!==(t=e.getAttribute("data-ref"))&&(r.refs[t]=e):void 0!==(t=e.dataset.ref)&&(r.refs[t]=e),""!==e.id&&(r.ids[e.id]=e)})}),r.root=1===r.fragment.childNodes.length?r.fragment.firstElementChild:Array.from(r.fragment.childNodes)}return r(e,[{key:"getNode",value:function(e,t){switch(console.warn("getNode() is not finished yet."),t=Object.assign({firstMatch:!0},t),N(e)){case"id":return this.ids[e];case"class":case"query":return!0===t.firstMatch?this.fragment.querySelector(e):this.fragment.querySelectorAll(e);default:throw new Error("query is not valid.")}}},{key:"addNode",value:function(e,t){switch(console.warn("addNode() is not finished yet."),N(e)){case"Node":e.appendChild(t.fragment);break;case"id":this.ids[e].appendChild(t.fragment);break;case"class":case"query":throw new Error("class or query is not implemented.");default:throw new Error("position is not valid.")}}},{key:"removeNode",value:function(e){switch(console.warn("removeNode() is not finished yet."),N(e)){case"Node":throw new Error("removeNode() not implemented for 'Node'.");case"id":this.ids[e].parentNode.removeChild(this.ids[e]);break;case"class":throw new Error("removeNode() not implemented for class.");case"query":throw new Error("removeNode() not implemented for query.");default:throw new Error("n is not valid.")}}}]),e}());function p(e,t,n){var r,o,a="",i="",s=void 0,l=void 0,c=0,d=function(){return 0!==c},u=new RegExp("^(<"+t+"(?:[^\\/>]*)?(?:(?=((\\/)>))\\2|(?:>.*?(?=<\\/"+t+"|<"+t+"))))"),f=new RegExp("^(<\\/"+t+">(?:.*?)(?=(?:<\\/"+t+")|(?:<"+t+"))|(?:<\\/"+t+">))");r=e.match(/(.*?)(?=<foreignObject)/)[0].length,e=e.substring(r);do{var p=void 0,g=void 0;do{if(null!==(p=e.match(u))&&void 0!==p[0]){if(e=e.substring(p[0].length),a+=p[0],"/>"===p[2]){if(d())continue;return a}c+=1}}while(null!==p&&void 0!==p[0]);do{null!==(g=e.match(f))&&void 0!==g[0]&&(e=e.substring(g[0].length),a+=g[0],c-=1)}while(null!==g&&void 0!==g[0])}while(d());if(o=r+a.length,n){var m=new RegExp("^<"+t+"(?:[^\\/>]*)?(\\/)?>"),h=new RegExp("<\\/"+t+">$"),v=a.match(m),w=a.match(h);"/"===v[1]?(console.warn("A selfclosing tag has no content."),i=""):i=a.substring(v[0].length,w.index),s=v[0].length,l=w.index}return n?{tagGroup:a,startIndex:r,endIndex:o,content:i,contentStartIndex:s,contentEndIndex:l}:{tagGroup:a,startIndex:r,endIndex:o}}function g(e){for(var t=[];e.length>0;){var n=b(e);if(void 0===n)throw console.log(e),new Error("firstTagName is 'undefined'. You must have an error in your 'tagText'. Are you missing a closing tag?");var r=o(n,!1);if(void 0===r)throw new Error("createTagGroupString(firstTagName) returned 'undefined'.");t.push(r)}function o(t,n){var r="",o=0,a=function(){return 0!==o},i=new RegExp("^(<"+t+"(?:[^\\/>]*)(?:(?=((\\/)>))\\2|(?:>.*?(?=<\\/"+t+"|<"+t+"))))"),s=new RegExp("^(<\\/"+t+">(?:.*?)(?=(?:<\\/"+t+")|(?:<"+t+"))|(?:<\\/"+t+">))"),l=new RegExp("^(</"+t+"[^>]*?>)");do{var c=void 0,d=void 0;do{if(null!==(c=e.match(i))&&void 0!==c[0]){if(e=e.substring(c[0].length),r+=c[0],"/>"===c[2]&&!a())return r;o+=1}}while(null!==c&&void 0!==c[0]);do{null!==(d=1===o?e.match(l):e.match(s))&&void 0!==d[0]&&(e=e.substring(d[0].length),r+=d[0],o-=1)}while(null!==d&&void 0!==d[0])}while(a());return r}if(t.length<1)throw new Error('Could not create tag groups for "'+e+"\". See the 'tagGroups': "+t+".");return t}t.default=f;var m="nodetemplate-svg-anchor",h="nodetemplate-eb-anchor",v="nodetemplate-fo-anchor",w="nodetemplate-fo-content-anchor-";function b(e){var t=e.match(/^<([a-zA-Z\d]+)/);return null!==t?t[1]:void 0}function y(e){return/<foreignObject/.test(e)}function x(e){return/<(?=(audio|canvas|iframe|video))\1/.test(e)}var E=function(e,t){var n=0,r=function e(r){if(null!==r&&r.nodeType===Node.ELEMENT_NODE)t(r),n++,r.hasChildNodes&&e(r.firstElementChild),null!==r.nextElementSibling&&e(r.nextElementSibling);else if(0===n)throw new Error("parameter 1 is not of type 'Node'.")};return r(e),!1};function N(e){return e instanceof Node?"Node":"."===e.charAt(0)?"id":"#"===e.charAt(0)?"class":"query"}},function(e){e.exports=["a","abbr","acronym","address","applet","area","article","aside","audio","b","base","basefont","bdi","bdo","bgsound","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","command","content","data","datalist","dd","del","details","dfn","dialog","dir","div","dl","dt","element","em","embed","fieldset","figcaption","figure","font","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","image","img","input","ins","isindex","kbd","keygen","label","legend","li","link","listing","main","map","mark","marquee","math","menu","menuitem","meta","meter","multicol","nav","nextid","nobr","noembed","noframes","noscript","object","ol","optgroup","option","output","p","param","picture","plaintext","pre","progress","q","rb","rbc","rp","rt","rtc","ruby","s","samp","script","section","select","shadow","slot","small","source","spacer","span","strike","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","tt","u","ul","var","video","wbr","xmp"]},function(e){e.exports=["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","animation","audio","canvas","circle","clipPath","color-profile","cursor","defs","desc","discard","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","handler","hatch","hatchpath","hkern","iframe","image","line","linearGradient","listener","marker","mask","mesh","meshgradient","meshpatch","meshrow","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","prefetch","radialGradient","rect","script","set","solidColor","solidcolor","stop","style","svg","switch","symbol","tbreak","text","textArea","textPath","title","tref","tspan","unknown","use","video","view","vkern"]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,